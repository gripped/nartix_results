--- Arch PKGBUILD
+++ Artix PKGBUILD
@@ -1,49 +1,62 @@
 
 pkgbase=rocm-llvm
 pkgname=(rocm-llvm rocm-device-libs comgr)
-pkgver=6.2.4
+pkgver=6.3.2
 pkgrel=1
 arch=('x86_64')
 url='https://rocm.docs.amd.com/en/latest/reference/rocmcc.html'
 makedepends=('git' 'cmake' 'python' 'ninja' 'rocm-core' 'rocm-cmake' 'perl'
              'gcc-libs' 'zlib' 'zstd' 'libffi' 'libedit' 'ncurses' 'libxml2' 'patchelf')
 source=("$pkgbase::git+https://github.com/ROCm/llvm-project#tag=rocm-$pkgver")
-sha256sums=('09cb1afda4d2585b35e12142d4a4a4cab42be6ade7f41be59fd13df86d77ae10')
+sha256sums=('c64fd724503b9c10381f350eea38fadb622ea86067839d45cd0efc0058621153')
 options=(staticlibs !lto)
 
 build() {
     CFLAGS+=' -g1'
     CXXFLAGS+=' -g1'
 
+    local _rocm_exe_rpath='\$ORIGIN/../lib:\$ORIGIN/../../../lib'
+    local _rocm_lib_rpath='\$ORIGIN'
     local cmake_args=(
         -G Ninja
         -B build
         -S "$pkgbase/llvm"
-        -DCMAKE_BUILD_TYPE=Release
-        -DCMAKE_INSTALL_PREFIX='/opt/rocm/lib/llvm'
-        -DLLVM_HOST_TRIPLE=$CHOST
-        -DLLVM_ENABLE_PROJECTS='llvm;clang;lld;compiler-rt;clang-tools-extra'
-        -DCLANG_ENABLE_AMDCLANG=ON
-        -DLLVM_ENABLE_RUNTIMES='libcxx;libcxxabi;libunwind'
-        -DLIBCXX_ENABLE_STATIC=ON
-        -DLIBCXXABI_ENABLE_STATIC=ON
-        -DLLVM_TARGETS_TO_BUILD='AMDGPU;NVPTX;X86'
-        -DCLANG_DEFAULT_LINKER=lld
-        -DLLVM_INSTALL_UTILS=ON
-        -DLLVM_ENABLE_BINDINGS=OFF
-        -DLLVM_LINK_LLVM_DYLIB=OFF
-        -DLLVM_BUILD_LLVM_DYLIB=OFF
-        -DLLVM_ENABLE_ASSERTIONS=ON
-        -DOCAMLFIND=NO
-        -DLLVM_ENABLE_OCAMLDOC=OFF
-        -DLLVM_INCLUDE_BENCHMARKS=OFF
-        -DLLVM_BUILD_TESTS=OFF
-        -DLLVM_INCLUDE_TESTS=OFF
-        -DCLANG_INCLUDE_TESTS=OFF
-        -DLLVM_BINUTILS_INCDIR=/usr/include
+        -D CMAKE_BUILD_TYPE=Release
+        -D CMAKE_INSTALL_PREFIX="/opt/rocm/lib/llvm"
+        -D LLVM_HOST_TRIPLE=$CHOST
+        -D LLVM_ENABLE_PROJECTS='clang;lld;clang-tools-extra'
+        -D CLANG_ENABLE_AMDCLANG=ON
+        -D LLVM_ENABLE_RUNTIMES='compiler-rt;libunwind;libcxx;libcxxabi'
+        -D LIBCXX_ENABLE_STATIC=ON
+        -D LIBCXXABI_ENABLE_STATIC=ON
+        -D LLVM_TARGETS_TO_BUILD='AMDGPU;NVPTX;X86'
+        -D CLANG_DEFAULT_LINKER=lld
+        -D CLANG_DEFAULT_RTLIB=compiler-rt
+        -D CLANG_DEFAULT_UNWINDLIB=libgcc
+        -D LLVM_INSTALL_UTILS=ON
+        -D LLVM_ENABLE_BINDINGS=OFF
+        -D LLVM_LINK_LLVM_DYLIB=OFF
+        -D LLVM_BUILD_LLVM_DYLIB=OFF
+        -D LLVM_ENABLE_ASSERTIONS=ON
+        -D OCAMLFIND=NO
+        -D LLVM_ENABLE_OCAMLDOC=OFF
+        -D LLVM_INCLUDE_BENCHMARKS=OFF
+        -D LLVM_BUILD_TESTS=OFF
+        -D LLVM_INCLUDE_TESTS=OFF
+        -D CLANG_INCLUDE_TESTS=OFF
+        -D LLVM_BINUTILS_INCDIR=/usr/include
+        -D CMAKE_SKIP_BUILD_RPATH=TRUE
+        -D CMAKE_SKIP_INSTALL_RPATH=TRUE
+        -D CMAKE_EXE_LINKER_FLAGS="-Wl,--enable-new-dtags,--build-id=sha1,--rpath,$_rocm_exe_rpath"
+        -D CMAKE_SHARED_LINKER_FLAGS="-Wl,--enable-new-dtags,--build-id=sha1,--rpath,$_rocm_lib_rpath"
+        -D CLANG_LINK_FLANG_LEGACY=ON
+        -D CMAKE_CXX_STANDARD=17
     )
     cmake "${cmake_args[@]}"
+    cmake --build build -- clang lld compiler-rt
+    cmake --build build -- runtimes cxx
     cmake --build build
+    cmake --build build -- clang-tidy
 
     local cmake_device_libs_args=(
         -Wno-dev
@@ -79,8 +92,6 @@
 
     ln -s /opt/rocm/lib/llvm "$pkgdir/opt/rocm/llvm"
 
-    patchelf --set-rpath '$ORIGIN' "$pkgdir/opt/rocm/lib/llvm/lib/libc++abi.so"
-
     install -d "$pkgdir/opt/rocm/lib/llvm/lib/bfd-plugins"
     ln -s /opt/rocm/lib/llvm/lib/LLVMgold.so "$pkgdir/opt/rocm/lib/llvm/lib/bfd-plugins/LLVMgold.so"
 


############# Stripped diff below #################



--- Arch PKGBUILD
+++ Artix PKGBUILD
@@ -1,35 +1,48 @@
 build() {
 CFLAGS+=' -g1'
 CXXFLAGS+=' -g1'
+local _rocm_exe_rpath='\$ORIGIN/../lib:\$ORIGIN/../../../lib'
+local _rocm_lib_rpath='\$ORIGIN'
 local cmake_args=(
 -G Ninja
 -B build
 -S "$pkgbase/llvm"
--DCMAKE_BUILD_TYPE=Release
--DCMAKE_INSTALL_PREFIX='/opt/rocm/lib/llvm'
--DLLVM_HOST_TRIPLE=$CHOST
--DLLVM_ENABLE_PROJECTS='llvm;clang;lld;compiler-rt;clang-tools-extra'
--DCLANG_ENABLE_AMDCLANG=ON
--DLLVM_ENABLE_RUNTIMES='libcxx;libcxxabi;libunwind'
--DLIBCXX_ENABLE_STATIC=ON
--DLIBCXXABI_ENABLE_STATIC=ON
--DLLVM_TARGETS_TO_BUILD='AMDGPU;NVPTX;X86'
--DCLANG_DEFAULT_LINKER=lld
--DLLVM_INSTALL_UTILS=ON
--DLLVM_ENABLE_BINDINGS=OFF
--DLLVM_LINK_LLVM_DYLIB=OFF
--DLLVM_BUILD_LLVM_DYLIB=OFF
--DLLVM_ENABLE_ASSERTIONS=ON
--DOCAMLFIND=NO
--DLLVM_ENABLE_OCAMLDOC=OFF
--DLLVM_INCLUDE_BENCHMARKS=OFF
--DLLVM_BUILD_TESTS=OFF
--DLLVM_INCLUDE_TESTS=OFF
--DCLANG_INCLUDE_TESTS=OFF
--DLLVM_BINUTILS_INCDIR=/usr/include
+-D CMAKE_BUILD_TYPE=Release
+-D CMAKE_INSTALL_PREFIX="/opt/rocm/lib/llvm"
+-D LLVM_HOST_TRIPLE=$CHOST
+-D LLVM_ENABLE_PROJECTS='clang;lld;clang-tools-extra'
+-D CLANG_ENABLE_AMDCLANG=ON
+-D LLVM_ENABLE_RUNTIMES='compiler-rt;libunwind;libcxx;libcxxabi'
+-D LIBCXX_ENABLE_STATIC=ON
+-D LIBCXXABI_ENABLE_STATIC=ON
+-D LLVM_TARGETS_TO_BUILD='AMDGPU;NVPTX;X86'
+-D CLANG_DEFAULT_LINKER=lld
+-D CLANG_DEFAULT_RTLIB=compiler-rt
+-D CLANG_DEFAULT_UNWINDLIB=libgcc
+-D LLVM_INSTALL_UTILS=ON
+-D LLVM_ENABLE_BINDINGS=OFF
+-D LLVM_LINK_LLVM_DYLIB=OFF
+-D LLVM_BUILD_LLVM_DYLIB=OFF
+-D LLVM_ENABLE_ASSERTIONS=ON
+-D OCAMLFIND=NO
+-D LLVM_ENABLE_OCAMLDOC=OFF
+-D LLVM_INCLUDE_BENCHMARKS=OFF
+-D LLVM_BUILD_TESTS=OFF
+-D LLVM_INCLUDE_TESTS=OFF
+-D CLANG_INCLUDE_TESTS=OFF
+-D LLVM_BINUTILS_INCDIR=/usr/include
+-D CMAKE_SKIP_BUILD_RPATH=TRUE
+-D CMAKE_SKIP_INSTALL_RPATH=TRUE
+-D CMAKE_EXE_LINKER_FLAGS="-Wl,--enable-new-dtags,--build-id=sha1,--rpath,$_rocm_exe_rpath"
+-D CMAKE_SHARED_LINKER_FLAGS="-Wl,--enable-new-dtags,--build-id=sha1,--rpath,$_rocm_lib_rpath"
+-D CLANG_LINK_FLANG_LEGACY=ON
+-D CMAKE_CXX_STANDARD=17
 )
 cmake "${cmake_args[@]}"
+cmake --build build -- clang lld compiler-rt
+cmake --build build -- runtimes cxx
 cmake --build build
+cmake --build build -- clang-tidy
 local cmake_device_libs_args=(
 -Wno-dev
 -S "$pkgbase/amd/device-libs"
