--- Arch PKGBUILD
+++ Artix PKGBUILD
@@ -1,46 +1,32 @@
 
 pkgbase=tensorflow
 pkgname=(tensorflow tensorflow-opt tensorflow-cuda tensorflow-opt-cuda python-tensorflow python-tensorflow-opt python-tensorflow-cuda python-tensorflow-opt-cuda)
-pkgver=2.20.0
-_pkgver=2.19.0
-pkgrel=1
-_cuda_ver=12.8.0
-_cudnn_ver=9.7.0
+pkgver=2.18.0
+_pkgver=2.18.0
+pkgrel=2
 pkgdesc="Library for computation using data flow graphs for scalable machine learning"
 url="https://www.tensorflow.org/"
-license=(Apache-2.0)
+license=('APACHE')
 arch=('x86_64')
 depends=('c-ares' 'pybind11' 'openssl' 'libpng' 'curl' 'giflib' 'icu' 'libjpeg-turbo' 'intel-oneapi-openmp'
          'intel-oneapi-compiler-shared-runtime-libs')
-makedepends=('bazel' 'git' 'gcc14' 'openmp'
+makedepends=('bazel' 'cuda' 'nvidia-utils' 'nccl' 'git' 'cudnn' 'openmp'
              'python-installer' 'patchelf' 'libxcrypt-compat' 'clang' 'lld')
 optdepends=('tensorboard: Tensorflow visualization toolkit')
 source=("$pkgname-$pkgver.tar.gz::https://github.com/tensorflow/tensorflow/archive/v${_pkgver}.tar.gz"
-        tensorflow-2.18.0-cuda-12.8.patch
-        tensorflow-2.18.0-clang19-compat.patch
-        tensorflow-2.18.0-python-3.13-API.patch
-        tensorflow-2.18.0-add-python-3.13-requirements-lock-file.patch
-        https://github.com/bazelbuild/bazel/releases/download/6.5.0/bazel_nojdk-6.5.0-linux-x86_64
-        tensorflow-2.19.0-tf-runtime-workspace.patch
-        tf-runtime-forward-decls.patch
-        tensorflow-2.19.0-matmul-it-unused-result.patch
-)
-sha512sums=('f9647621c93b6a7d3c43d92b7cfa0ec481de0f43e4936c0d946e305b440aa1caa72a48cbf4ccef7efc270f1e6d7926c2c327dfd2af9f649707e52bb10bd86235'
-            'e561bd4198658a2c8b33ef59992d5d78838e2d5b937e4e49eca836d26e0d243fad42dfc9f5b106cb39ce9945e7afa23589f0d93ec002c79ce887ad2b3c473ebc'
-            'd17893b4fc56960d7d4a6a8cd906186018045f103a6712b45a0cdb238ec3e5c9c51e233db24d79918f5991884858f4ac5feabd55c6e7279047afe10549b8d09f'
-            'a9aaee9a8b98438ea78808634a491ab5f52e230cef6c80c1f2ea26e7ed32159b398420632d2ce3c8291b23158ef94503c2e162c26fa50a6cdf6bb2a750ca2b62'
-            '757726d348239633adb2ebb332d7906d2749b260afe20b1eef60ee776b0afcc872ea6876603ece028e06498ee2f8e8c5df4882904b8be1748615ccab7bc6fc23'
-            'd3789f0ecd354468f2e24d98501041430ae99c173320fa9c3eb02f225c08ed298fd1ad259e4ad9bb70b6ae89d84cd87460aaa720de3486d40b30777a8fe45453'
-            '27a07c1f5ab3898e049717e3f56498577c62840416b425e582a308d22112c0341b26a69d419daa0f80fac5be53cee122122b1b8200fc885ae5f7346b8e3ecb10'
-            'b3ac22ede074decdb751adbc8f0324f4b729ffb4927fddcc67250e2f2a2812d2ed6ff515ed98cb3eaf5c1e4b755d6b780f5515181b6f10f046dbaa91e0eb1964'
-            'e5856d277edcef6ab655e8b641f1ec8fe9823264221d687c9938bb00d5acee626a2a05b46cfd97fbad8551f270332ed09b73848bf9784137317fee47ad64c80e')
+        tensorflow-newer-hermetic-nvidia-versions.patch
+        https://github.com/tensorflow/tensorflow/commit/3f4b2fda6ffe7dfe03c1663ef37f54fc4432cc8b.patch
+        tensorflow-2.16.1-python-distutils-removal.patch
+        https://github.com/bazelbuild/bazel/releases/download/6.5.0/bazel_nojdk-6.5.0-linux-x86_64)
+sha512sums=('177decaafcdef27afee84a17268f473141d2d0c092d5f3fe33c9cdd3ce4fd52f6b4b83bc41b4b005c8889f5e65602a57ae3eba8f63e0c527feaf83917453f4e6'
+            '4c2780d69d72c8794aad252a96b21ab81d4e24cb9c6a4b89ff24f0627c7e96b58bec27e59725ef77d6673665faebcb0e958e4dd9406704899ba12fa8d313929e'
+            '03e8d7188a81cc237899f4f287f129e7759d268f604252636e007e1ffe71b6a07926c219f79b5bf1f8c088345e292eff461d2375ca1a73af435cdca182e9c26c'
+            'e4c44d2f5314b83d8ed404e5ec14960ef8b7df0c1a2a3e826f913a02c901f9fd0326f9014a602121e0fdb2f928d1459f8b8180455491a1f937ce84e12f6a7d3e'
+            'd3789f0ecd354468f2e24d98501041430ae99c173320fa9c3eb02f225c08ed298fd1ad259e4ad9bb70b6ae89d84cd87460aaa720de3486d40b30777a8fe45453')
 
 _common_py_depends=(python-termcolor python-astor python-gast python-numpy python-protobuf absl-py
-                    python-h5py python-keras python-opt_einsum python-wrapt
+                    python-h5py python-keras python-tensorflow-estimator python-opt_einsum
                     python-astunparse python-pasta python-flatbuffers python-typing_extensions python-ml-dtypes)
-
-_cuda_depends=()
-makedepends+=("${_cuda_depends[@]}")
 
 get_pyver () {
   python -c 'import sys; print(str(sys.version_info[0]) + "." + str(sys.version_info[1]))'
@@ -70,23 +56,15 @@
   export PATH="${srcdir}/bazel:$PATH"
   bazel --version
 
-  patch -Np1 -i ../tensorflow-2.18.0-cuda-12.8.patch -d tensorflow-${_pkgver}
-
-  patch -Np1 -i ../tensorflow-2.18.0-clang19-compat.patch -d tensorflow-${_pkgver}
-
-  patch -Np1 -i ../tensorflow-2.18.0-python-3.13-API.patch -d tensorflow-${_pkgver}
-  patch -Np1 -i ../tensorflow-2.18.0-add-python-3.13-requirements-lock-file.patch -d tensorflow-${_pkgver}
-
-  patch -Np1 -i ../tensorflow-2.19.0-tf-runtime-workspace.patch -d tensorflow-${_pkgver}
-  cp tf-runtime-forward-decls.patch tensorflow-${_pkgver}/third_party/tf_runtime/forward_decls.patch
-
-  patch -Np1 -i ../tensorflow-2.19.0-matmul-it-unused-result.patch -d tensorflow-${_pkgver}
+  patch -Np1 -i ../tensorflow-newer-hermetic-nvidia-versions.patch -d tensorflow-${_pkgver}
+
+  patch -Np1 -i ../3f4b2fda6ffe7dfe03c1663ef37f54fc4432cc8b.patch -d tensorflow-${_pkgver}
+
+  patch -Np1 -i ../tensorflow-2.16.1-python-distutils-removal.patch -d tensorflow-${_pkgver}
 
   sed -i -E "s/'([0-9a-z_-]+) .= [0-9].+[0-9]'/'\1'/" tensorflow-${_pkgver}/tensorflow/tools/pip_package/setup.py
 
   sed -i "/set_cuda_local_path(environ_cp, '/d" tensorflow-${_pkgver}/configure.py
-
-  sed -i 's/^build:cuda_clang --repo_env=HERMETIC_CUDA_COMPUTE_CAPABILITIES/#&/' tensorflow-${_pkgver}/.bazelrc
 
   cp -r tensorflow-${_pkgver} tensorflow-${_pkgver}-opt
   cp -r tensorflow-${_pkgver} tensorflow-${_pkgver}-cuda
@@ -113,23 +91,24 @@
   export TF_SYSTEM_LIBS="boringssl,curl,cython,gif,icu,libjpeg_turbo,nasm,png,zlib"
   export TF_SET_ANDROID_WORKSPACE=0
   export TF_DOWNLOAD_CLANG=0
+  export TF_NCCL_VERSION=$(pkg-config nccl --modversion | grep -Po '\d+\.\d+')
   export NCCL_INSTALL_PATH=/usr
   export CC=gcc
   export CXX=g++
-  export GCC_HOST_COMPILER_PATH=/usr/bin/gcc-14 #"${NVCC_CCBIN/++/cc}"
-  export HOST_C_COMPILER=/usr/bin/gcc-14 #"${NVCC_CCBIN/++/cc}"
-  export HOST_CXX_COMPILER=/usr/bin/g++-14 #"$NVCC_CCBIN"
+  export GCC_HOST_COMPILER_PATH="${NVCC_CCBIN/++/cc}"
+  export HOST_C_COMPILER="${NVCC_CCBIN/++/cc}"
+  export HOST_CXX_COMPILER="$NVCC_CCBIN"
   export TF_CUDA_CLANG=0  # Clang currently disabled because it's not compatible at the moment.
   export CLANG_CUDA_COMPILER_PATH=/usr/bin/clang
   export TF_CUDA_PATHS=/opt/cuda,/usr/lib,/usr
-  export HERMETIC_CUDA_VERSION=$_cuda_ver
-  export HERMETIC_CUDNN_VERSION=$_cudnn_ver
-  export HERMETIC_CUDA_COMPUTE_CAPABILITIES=sm_52,sm_53,sm_60,sm_61,sm_62,sm_70,sm_72,sm_75,sm_80,sm_86,sm_87,sm_89,sm_90,sm_100,sm_101,sm_120,compute_120
+  export HERMETIC_CUDA_VERSION=$(/opt/cuda/bin/nvcc --version | sed -n 's/\(release [^.]\+.[^.]\+\),/\1.0,/;s/^.*release \(.*\),.*/\1/p')
+  export HERMETIC_CUDNN_VERSION="$(sed -n 's/^#define CUDNN_MAJOR\s*\(.*\).*/\1/p' /usr/include/cudnn_version.h).$(sed -n 's/^#define CUDNN_MINOR\s*\(.*\).*/\1/p' /usr/include/cudnn_version.h).$(sed -n 's/^#define CUDNN_PATCHLEVEL\s*\(.*\).*/\1/p' /usr/include/cudnn_version.h)"
+  export HERMETIC_CUDA_COMPUTE_CAPABILITIES=sm_52,sm_53,sm_60,sm_61,sm_62,sm_70,sm_72,sm_75,sm_80,sm_86,sm_87,sm_89,sm_90,compute_90
   export TF_PYTHON_VERSION=$(get_pyver)
   export PYTHON_BIN_PATH=/usr/bin/python$(get_pyver)
   export USE_DEFAULT_PYTHON_LIB_PATH=1
 
-  export BAZEL_ARGS="-c opt --verbose_failures --config=verbose_logs --copt=-Wno-c23-extensions"
+  export BAZEL_ARGS="-c opt --verbose_failures --config=verbose_logs --copt=-Wno-gnu-offsetof-extensions"
 }
 
 build() {
@@ -150,7 +129,7 @@
 
   echo "Building with cuda and with non-x86-64 optimizations"
   cd "${srcdir}"/tensorflow-${_pkgver}-opt-cuda
-  export CC_OPT_FLAGS="-march=x86-64-v3 -O2"
+  export CC_OPT_FLAGS="-march=haswell -O2"
   export TF_NEED_CUDA=1
   ./configure
   bazel \
@@ -180,7 +159,7 @@
 
   echo "Building without cuda and with non-x86-64 optimizations"
   cd "${srcdir}"/tensorflow-${_pkgver}-opt
-  export CC_OPT_FLAGS="-march=x86-64-v3 -O2"
+  export CC_OPT_FLAGS="-march=haswell -O2"
   export TF_NEED_CUDA=0
   ./configure
   bazel \
@@ -260,7 +239,7 @@
 
 package_tensorflow-cuda() {
   pkgdesc="Library for computation using data flow graphs for scalable machine learning (with CUDA)"
-  depends+=("${_cuda_depends[@]}")
+  depends+=(cuda cudnn nccl)
   conflicts=(tensorflow)
   provides=(tensorflow)
 
@@ -270,7 +249,7 @@
 
 package_tensorflow-opt-cuda() {
   pkgdesc="Library for computation using data flow graphs for scalable machine learning (with CUDA and AVX CPU optimizations)"
-  depends+=("${_cuda_depends[@]}")
+  depends+=(cuda cudnn nccl)
   conflicts=(tensorflow)
   provides=(tensorflow tensorflow-cuda)
 
@@ -297,7 +276,7 @@
 
 package_python-tensorflow-cuda() {
   pkgdesc="Library for computation using data flow graphs for scalable machine learning (with CUDA)"
-  depends+=(tensorflow-cuda "${_cuda_depends[@]}" python-pycuda "${_common_py_depends[@]}")
+  depends+=(tensorflow-cuda cuda cudnn nccl python-pycuda "${_common_py_depends[@]}")
   conflicts=(python-tensorflow)
   provides=(python-tensorflow)
 
@@ -307,7 +286,7 @@
 
 package_python-tensorflow-opt-cuda() {
   pkgdesc="Library for computation using data flow graphs for scalable machine learning (with CUDA and AVX CPU optimizations)"
-  depends+=(tensorflow-opt-cuda "${_cuda_depends[@]}" python-pycuda "${_common_py_depends[@]}")
+  depends+=(tensorflow-opt-cuda cuda cudnn nccl python-pycuda "${_common_py_depends[@]}")
   conflicts=(python-tensorflow)
   provides=(python-tensorflow python-tensorflow-cuda)
 


############# Stripped diff below #################

--- arch_depends
+++ artix_depends
@@ -2,8 +2,9 @@
 bazel
 c-ares
 clang
+cuda
+cudnn
 curl
-gcc14
 giflib
 git
 icu
@@ -13,6 +14,8 @@
 libpng
 libxcrypt-compat
 lld
+nccl
+nvidia-utils
 openmp
 openssl
 patchelf
@@ -30,9 +33,9 @@
 python-pasta
 python-protobuf
 python-pycuda
+python-tensorflow-estimator
 python-termcolor
 python-typing_extensions
-python-wrapt
 tensorflow
 tensorflow-cuda
 tensorflow-opt

--- Arch PKGBUILD
+++ Artix PKGBUILD
@@ -2,16 +2,11 @@
 install -Dm755 "${srcdir}"/bazel_nojdk-6.5.0-linux-x86_64 bazel/bazel
 export PATH="${srcdir}/bazel:$PATH"
 bazel --version
-patch -Np1 -i ../tensorflow-2.18.0-cuda-12.8.patch -d tensorflow-${_pkgver}
-patch -Np1 -i ../tensorflow-2.18.0-clang19-compat.patch -d tensorflow-${_pkgver}
-patch -Np1 -i ../tensorflow-2.18.0-python-3.13-API.patch -d tensorflow-${_pkgver}
-patch -Np1 -i ../tensorflow-2.18.0-add-python-3.13-requirements-lock-file.patch -d tensorflow-${_pkgver}
-patch -Np1 -i ../tensorflow-2.19.0-tf-runtime-workspace.patch -d tensorflow-${_pkgver}
-cp tf-runtime-forward-decls.patch tensorflow-${_pkgver}/third_party/tf_runtime/forward_decls.patch
-patch -Np1 -i ../tensorflow-2.19.0-matmul-it-unused-result.patch -d tensorflow-${_pkgver}
+patch -Np1 -i ../tensorflow-newer-hermetic-nvidia-versions.patch -d tensorflow-${_pkgver}
+patch -Np1 -i ../3f4b2fda6ffe7dfe03c1663ef37f54fc4432cc8b.patch -d tensorflow-${_pkgver}
+patch -Np1 -i ../tensorflow-2.16.1-python-distutils-removal.patch -d tensorflow-${_pkgver}
 sed -i -E "s/'([0-9a-z_-]+) .= [0-9].+[0-9]'/'\1'/" tensorflow-${_pkgver}/tensorflow/tools/pip_package/setup.py
 sed -i "/set_cuda_local_path(environ_cp, '/d" tensorflow-${_pkgver}/configure.py
-sed -i 's/^build:cuda_clang --repo_env=HERMETIC_CUDA_COMPUTE_CAPABILITIES/#&/' tensorflow-${_pkgver}/.bazelrc
 cp -r tensorflow-${_pkgver} tensorflow-${_pkgver}-opt
 cp -r tensorflow-${_pkgver} tensorflow-${_pkgver}-cuda
 cp -r tensorflow-${_pkgver} tensorflow-${_pkgver}-opt-cuda
@@ -36,22 +31,23 @@
 export TF_SYSTEM_LIBS="boringssl,curl,cython,gif,icu,libjpeg_turbo,nasm,png,zlib"
 export TF_SET_ANDROID_WORKSPACE=0
 export TF_DOWNLOAD_CLANG=0
+export TF_NCCL_VERSION=$(pkg-config nccl --modversion | grep -Po '\d+\.\d+')
 export NCCL_INSTALL_PATH=/usr
 export CC=gcc
 export CXX=g++
-export GCC_HOST_COMPILER_PATH=/usr/bin/gcc-14 #"${NVCC_CCBIN/++/cc}"
-export HOST_C_COMPILER=/usr/bin/gcc-14 #"${NVCC_CCBIN/++/cc}"
-export HOST_CXX_COMPILER=/usr/bin/g++-14 #"$NVCC_CCBIN"
+export GCC_HOST_COMPILER_PATH="${NVCC_CCBIN/++/cc}"
+export HOST_C_COMPILER="${NVCC_CCBIN/++/cc}"
+export HOST_CXX_COMPILER="$NVCC_CCBIN"
 export TF_CUDA_CLANG=0  # Clang currently disabled because it's not compatible at the moment.
 export CLANG_CUDA_COMPILER_PATH=/usr/bin/clang
 export TF_CUDA_PATHS=/opt/cuda,/usr/lib,/usr
-export HERMETIC_CUDA_VERSION=$_cuda_ver
-export HERMETIC_CUDNN_VERSION=$_cudnn_ver
-export HERMETIC_CUDA_COMPUTE_CAPABILITIES=sm_52,sm_53,sm_60,sm_61,sm_62,sm_70,sm_72,sm_75,sm_80,sm_86,sm_87,sm_89,sm_90,sm_100,sm_101,sm_120,compute_120
+export HERMETIC_CUDA_VERSION=$(/opt/cuda/bin/nvcc --version | sed -n 's/\(release [^.]\+.[^.]\+\),/\1.0,/;s/^.*release \(.*\),.*/\1/p')
+export HERMETIC_CUDNN_VERSION="$(sed -n 's/^#define CUDNN_MAJOR\s*\(.*\).*/\1/p' /usr/include/cudnn_version.h).$(sed -n 's/^#define CUDNN_MINOR\s*\(.*\).*/\1/p' /usr/include/cudnn_version.h).$(sed -n 's/^#define CUDNN_PATCHLEVEL\s*\(.*\).*/\1/p' /usr/include/cudnn_version.h)"
+export HERMETIC_CUDA_COMPUTE_CAPABILITIES=sm_52,sm_53,sm_60,sm_61,sm_62,sm_70,sm_72,sm_75,sm_80,sm_86,sm_87,sm_89,sm_90,compute_90
 export TF_PYTHON_VERSION=$(get_pyver)
 export PYTHON_BIN_PATH=/usr/bin/python$(get_pyver)
 export USE_DEFAULT_PYTHON_LIB_PATH=1
-export BAZEL_ARGS="-c opt --verbose_failures --config=verbose_logs --copt=-Wno-c23-extensions"
+export BAZEL_ARGS="-c opt --verbose_failures --config=verbose_logs --copt=-Wno-gnu-offsetof-extensions"
 }
 build() {
 echo "Building with cuda and without non-x86-64 optimizations"
@@ -69,7 +65,7 @@
 //tensorflow/tools/pip_package:wheel --repo_env=WHEEL_NAME=tensorflow
 echo "Building with cuda and with non-x86-64 optimizations"
 cd "${srcdir}"/tensorflow-${_pkgver}-opt-cuda
-export CC_OPT_FLAGS="-march=x86-64-v3 -O2"
+export CC_OPT_FLAGS="-march=haswell -O2"
 export TF_NEED_CUDA=1
 ./configure
 bazel \
@@ -95,7 +91,7 @@
 //tensorflow/tools/pip_package:wheel --repo_env=WHEEL_NAME=tensorflow_cpu
 echo "Building without cuda and with non-x86-64 optimizations"
 cd "${srcdir}"/tensorflow-${_pkgver}-opt
-export CC_OPT_FLAGS="-march=x86-64-v3 -O2"
+export CC_OPT_FLAGS="-march=haswell -O2"
 export TF_NEED_CUDA=0
 ./configure
 bazel \
