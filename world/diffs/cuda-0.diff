--- Arch PKGBUILD
+++ Artix PKGBUILD
@@ -3,7 +3,7 @@
 pkgbase=cuda
 pkgver=12.8.1
 _driverver=570.124.06
-pkgrel=2
+pkgrel=1
 pkgdesc="NVIDIA's GPU programming toolkit"
 arch=('x86_64')
 url="https://developer.nvidia.com/cuda-zone"
@@ -88,43 +88,26 @@
 }
 
 build() {
-  local _prepdir="${srcdir}"/prep
-  local _prepdir_tools="${srcdir}"/prep_tools
+  local _prepdir="${srcdir}/prep"
 
-  cd "${srcdir}"/builds/
+  cd "${srcdir}/builds"
 
-  find . -name cuda-uninstaller -delete
   rm -r NVIDIA*.run bin
-  rm -r integration  # contains only unnecessary/non-functional scripts
-  rm version.json
-
-  mkdir -p "${_prepdir_tools}"/opt/cuda/
-  local tools_components=(
-    cuda_nsight/{bin,nsightee_plugins}
-    cuda_nvvp/{bin,libnvvp}
-    cuda_sanitizer_api/compute-sanitizer
-    nsight_compute
-    nsight_systems
-  )
-  for component in "${tools_components[@]}"; do
-    cp -alr "$component" "${_prepdir_tools}"/opt/cuda/
-    rm -r "$component"
-  done
-  rmdir cuda_nvvp cuda_nsight cuda_sanitizer_api
-
-  ln -s ../compute-sanitizer/compute-sanitizer "${_prepdir_tools}"/opt/cuda/bin/compute-sanitizer
-
-  mkdir -p "${_prepdir}"/opt/cuda/
-  mv EULA.txt "${_prepdir}"/opt/cuda/
+  mkdir -p "${_prepdir}/opt/cuda/extras"
+  mv integration nsight_compute nsight_systems EULA.txt "${_prepdir}/opt/cuda"
+  mv cuda_demo_suite/extras/demo_suite "${_prepdir}/opt/cuda/extras/demo_suite"
+  mv cuda_sanitizer_api/compute-sanitizer "${_prepdir}/opt/cuda/extras/compute-sanitizer"
+  rmdir cuda_sanitizer_api
   for lib in *; do
-    cp -alr --force "$lib"/* "${_prepdir}"/opt/cuda/
-    rm -r "$lib"
+    if [[ "$lib" =~ .*"version.json".* ]]; then
+      continue
+    fi
+    cp -r $lib/* "${_prepdir}/opt/cuda/"
   done
 
-  rm "${_prepdir}"/opt/cuda/include/include
-  rm "${_prepdir}"/opt/cuda/lib64/lib64
+  rm -r "${_prepdir}"/opt/cuda/bin/cuda-uninstaller
 
-  ln -s lib64 "${_prepdir}"/opt/cuda/lib
+  ln -s lib64 "${_prepdir}/opt/cuda/lib"
 
   sed -i "/.*unsupported GNU version.*/d" "${_prepdir}"/opt/cuda/targets/x86_64-linux/include/crt/host_config.h
   sed -i "/.*unsupported clang version.*/d" "${_prepdir}"/opt/cuda/targets/x86_64-linux/include/crt/host_config.h
@@ -145,29 +128,41 @@
               'rdma-core: for GPUDirect Storage (libcufile_rdma.so)')
 
   local _prepdir="${srcdir}/prep"
-  mv "${_prepdir}"/* "${pkgdir}"
 
-  install -vDm 644 -t "${pkgdir}"/usr/lib/pkgconfig/ "${srcdir}"/*.pc
+  cd "${_prepdir}"
+  cp -al * "${pkgdir}"
 
-  install -vDm 644 "${srcdir}"/cuda.sh -t "${pkgdir}"/etc/profile.d/
-  install -vDm 644 "${srcdir}"/cuda.conf -t "${pkgdir}"/etc/ld.so.conf.d/
+  rm "${pkgdir}"/opt/cuda/include/include
+  rm "${pkgdir}"/opt/cuda/lib64/lib64
 
-  mkdir -p "${pkgdir}"/usr/share/licenses/${pkgname}/
-  ln -s /opt/cuda/EULA.txt "${pkgdir}"/usr/share/licenses/${pkgname}/EULA.txt
-  ln -s /opt/cuda/README "${pkgdir}"/usr/share/licenses/${pkgname}/README
+  install -Dt "${pkgdir}"/usr/lib/pkgconfig "${srcdir}"/*.pc
+
+  install -Dm644 "${srcdir}/cuda.sh" "${pkgdir}/etc/profile.d/cuda.sh"
+  install -Dm644 "${srcdir}/cuda.conf" "${pkgdir}/etc/ld.so.conf.d/cuda.conf"
+
+  rm -r "${pkgdir}"/opt/cuda/{bin/nvvp,bin/computeprof,libnvvp,nsight*}
+
+  mkdir -p "${pkgdir}/usr/share/licenses/${pkgname}"
+  ln -s /opt/cuda/EULA.txt "${pkgdir}/usr/share/licenses/${pkgname}/EULA.txt"
+  ln -s /opt/cuda/README "${pkgdir}/usr/share/licenses/${pkgname}/README"
 }
 
 package_cuda-tools() {
-  pkgdesc+=" (extra tools: nvvp, nsight, compute-sanitizer)"
+  pkgdesc="NVIDIA's GPU programming toolkit (extra tools: nvvp, nsight)"
   depends=('cuda' 'java-runtime=8' 'nss')
   optdepends=('perl: required by some NVVP plugins')
 
-  local _prepdir_tools="${srcdir}"/prep_tools
-  mv "${_prepdir_tools}"/* "${pkgdir}"
+  local _prepdir="${srcdir}/prep"
 
-  install -vDm 644 -t "${pkgdir}"/usr/share/applications/ "${srcdir}"/*.desktop
+  mkdir -p "${pkgdir}/opt/cuda/bin"
+  mv "${_prepdir}"/opt/cuda/nsight* "${pkgdir}/opt/cuda"
+  mv "${_prepdir}"/opt/cuda/bin/nvvp "${pkgdir}/opt/cuda/bin/nvvp"
+  mv "${_prepdir}"/opt/cuda/bin/computeprof "${pkgdir}/opt/cuda/bin/computeprof"
+  mv "${_prepdir}"/opt/cuda/libnvvp "${pkgdir}/opt/cuda"
 
-  mkdir -p "${pkgdir}"/usr/share/licenses/
-  ln -s /usr/share/licenses/cuda "${pkgdir}"/usr/share/licenses/${pkgname}
+  install -Dt "${pkgdir}"/usr/share/applications "${srcdir}"/*.desktop
+
+  mkdir -p "${pkgdir}/usr/share/licenses"
+  ln -s /usr/share/licenses/cuda "${pkgdir}/usr/share/licenses/${pkgname}"
 }
 


############# Stripped diff below #################



--- Arch PKGBUILD
+++ Artix PKGBUILD
@@ -2,36 +2,22 @@
 sh cuda_${pkgver}_${_driverver}_linux.run --target "${srcdir}" --noexec
 }
 build() {
-local _prepdir="${srcdir}"/prep
-local _prepdir_tools="${srcdir}"/prep_tools
-cd "${srcdir}"/builds/
-find . -name cuda-uninstaller -delete
+local _prepdir="${srcdir}/prep"
+cd "${srcdir}/builds"
 rm -r NVIDIA*.run bin
-rm -r integration  # contains only unnecessary/non-functional scripts
-rm version.json
-mkdir -p "${_prepdir_tools}"/opt/cuda/
-local tools_components=(
-cuda_nsight/{bin,nsightee_plugins}
-cuda_nvvp/{bin,libnvvp}
-cuda_sanitizer_api/compute-sanitizer
-nsight_compute
-nsight_systems
-)
-for component in "${tools_components[@]}"; do
-cp -alr "$component" "${_prepdir_tools}"/opt/cuda/
-rm -r "$component"
+mkdir -p "${_prepdir}/opt/cuda/extras"
+mv integration nsight_compute nsight_systems EULA.txt "${_prepdir}/opt/cuda"
+mv cuda_demo_suite/extras/demo_suite "${_prepdir}/opt/cuda/extras/demo_suite"
+mv cuda_sanitizer_api/compute-sanitizer "${_prepdir}/opt/cuda/extras/compute-sanitizer"
+rmdir cuda_sanitizer_api
+for lib in *; do
+if [[ "$lib" =~ .*"version.json".* ]]; then
+continue
+fi
+cp -r $lib/* "${_prepdir}/opt/cuda/"
 done
-rmdir cuda_nvvp cuda_nsight cuda_sanitizer_api
-ln -s ../compute-sanitizer/compute-sanitizer "${_prepdir_tools}"/opt/cuda/bin/compute-sanitizer
-mkdir -p "${_prepdir}"/opt/cuda/
-mv EULA.txt "${_prepdir}"/opt/cuda/
-for lib in *; do
-cp -alr --force "$lib"/* "${_prepdir}"/opt/cuda/
-rm -r "$lib"
-done
-rm "${_prepdir}"/opt/cuda/include/include
-rm "${_prepdir}"/opt/cuda/lib64/lib64
-ln -s lib64 "${_prepdir}"/opt/cuda/lib
+rm -r "${_prepdir}"/opt/cuda/bin/cuda-uninstaller
+ln -s lib64 "${_prepdir}/opt/cuda/lib"
 sed -i "/.*unsupported GNU version.*/d" "${_prepdir}"/opt/cuda/targets/x86_64-linux/include/crt/host_config.h
 sed -i "/.*unsupported clang version.*/d" "${_prepdir}"/opt/cuda/targets/x86_64-linux/include/crt/host_config.h
 for f in $(find "$_prepdir"/opt/cuda -name Makefile); do
