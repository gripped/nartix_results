--- Arch PKGBUILD
+++ Artix PKGBUILD
@@ -13,103 +13,61 @@
 pkgdesc='GNU GRand Unified Bootloader (2)'
 epoch=2
 _pkgver=2.12
-_unifont_ver='16.0.01'
+_unifont_ver='15.1.05'
 pkgver=${_pkgver/-/}
-pkgrel=3
+pkgrel=2
 url='https://www.gnu.org/software/grub/'
 arch=('x86_64')
 license=('GPL-3.0-or-later')
-backup=(
-  etc/default/grub
-  etc/grub.d/40_custom
-)
+backup=('etc/default/grub'
+        'etc/grub.d/40_custom')
 install="${pkgname}.install"
 options=('!makeflags')
-conflicts=(
-  grub-bios
-  grub-common
-  grub-efi-${_EFI_ARCH}
-  grub-emu
-  grub-legacy
-)
-replaces=(
-  grub-common
-  grub-bios
-  grub-emu
-  grub-efi-${_EFI_ARCH}
-)
-provides=(
-  grub-bios
-  grub-common
-  grub-efi-${_EFI_ARCH}
-  grub-emu
-)
-makedepends=(
-  autogen
-  device-mapper
-  freetype2
-  fuse3
-  gettext
-  git
-  help2man
-  python
-  rsync
-  texinfo
-  ttf-dejavu
-  xz
-)
-depends=(
-  device-mapper
-  gettext
-  sh
-  xz
-)
-optdepends=(
-  'dosfstools: For grub-mkrescue FAT FS and EFI support'
-  'efibootmgr: For grub-install EFI support'
-  'freetype2: For grub-mkfont usage'
-  'fuse3: For grub-mount usage'
-  'libisoburn: Provides xorriso for generating grub rescue iso using grub-mkrescue'
-  'lzop: For grub-mkrescue LZO support'
-  'mtools: For grub-mkrescue FAT FS support'
-  'os-prober: To detect other OSes when generating grub.cfg in BIOS systems'
-)
+
+conflicts=('grub-common' 'grub-bios' 'grub-emu' "grub-efi-${_EFI_ARCH}" 'grub-legacy')
+replaces=('grub-common' 'grub-bios' 'grub-emu' "grub-efi-${_EFI_ARCH}")
+provides=('grub-common' 'grub-bios' 'grub-emu' "grub-efi-${_EFI_ARCH}")
+
+makedepends=('git' 'rsync' 'xz' 'freetype2' 'ttf-dejavu' 'python' 'autogen'
+             'texinfo' 'help2man' 'gettext' 'device-mapper' 'fuse3')
+depends=('sh' 'xz' 'gettext' 'device-mapper')
+optdepends=('freetype2: For grub-mkfont usage'
+            'fuse3: For grub-mount usage'
+            'dosfstools: For grub-mkrescue FAT FS and EFI support'
+            'lzop: For grub-mkrescue LZO support'
+            'efibootmgr: For grub-install EFI support'
+            'libisoburn: Provides xorriso for generating grub rescue iso using grub-mkrescue'
+            'os-prober: To detect other OSes when generating grub.cfg in BIOS systems'
+            'mtools: For grub-mkrescue FAT FS support')
 
 if [[ "${_GRUB_EMU_BUILD}" == "1" ]]; then
-  makedepends+=(
-  libusbx
-  sdl
-  )
-  optdepends+=(
-  'libusbx: For grub-emu USB support'
-  'sdl: For grub-emu SDL support'
-  )
+    makedepends+=('libusbx' 'sdl')
+    optdepends+=('libusbx: For grub-emu USB support'
+                 'sdl: For grub-emu SDL support')
 fi
 
-validpgpkeys=(
-  'E53D497F3FA42AD8C9B4D1E835A93B74E82E4209'  # Vladimir 'phcoder' Serbinenko <phcoder@gmail.com>
-  'BE5C23209ACDDACEB20DB0A28C8189F1988C2166'  # Daniel Kiper <dkiper@net-space.pl>
-  '95D2E9AB8740D8046387FD151A09227B1F435A33') # Paul Hardy <unifoundry@unifoundry.com>
-
-source=(
-  "git+https://git.savannah.gnu.org/git/grub.git#tag=grub-${_pkgver}?signed"
-  'git+https://git.savannah.gnu.org/git/gnulib.git'
-  "https://ftp.gnu.org/gnu/unifont/unifont-${_unifont_ver}/unifont-${_unifont_ver}.bdf.gz"{,.sig}
-  '0001-00_header-add-GRUB_COLOR_-variables.patch'
-  '0002-10_linux-detect-archlinux-initramfs.patch'
-  '0003-support-dropins-for-default-configuration.patch'
-  'grub.default'
-  'sbat.csv'
-)
-b2sums=('a6cec7271c3ea54a99f02ee6bc0a5825c8be657af68ba9a32b39a5fe8bcb571fb1ba39210426f6bf6a48d913e6e00df37dc2123ea1b39330f4c47bd9dbac9ae3'
-        'SKIP'
-        '9f306564a63961f3a9f7a45f3f3363b1cc44a1651c3fb858ca4e87cdad79668f9aaa4b2989f91032cd614e37a98e5ca5eda2e2b0315d99deab6d0732b6f57a0d'
-        'SKIP'
-        '992c71790785304c28fbaf0dba21dab3e283b199509f0e7e1aa0df08126da75e15b6626c3638279ff2ecaa59b925096d7dbd67d6a53cebd0ce4326ff3719d25b'
-        'b4cd9ac976a579eca19d54c0b31c8d6324525fe5a0b9f5405deb63845367ac1adaa80ece4c166dfd5304608c41aa44b4f64efe235c03f437523b993be06e06e3'
-        'a7820bfe9bddc34af49de63222b3d2a9788367083e29db13b33120269adbfa1619ac421d8597f662f756592889f5cc5538544a17d9936d1420bd5742282c710c'
-        '5e42db2161e8f594b82005b26e590a20a0e8d32b01119bdd7b1a7f7c4b0f3360e8730a3ecdd5912a4dc7af5bd9aed1c3e780965ad6747d831b470158da19388d'
-        '052b55f53ec82d805f952afcd485bfc21623e0e427fc449f29208fecf5c321b9503d33e9025fef34ef3211b60043acfe5db08b057baaf72542a1c48cdc89b3c2')
+validpgpkeys=('E53D497F3FA42AD8C9B4D1E835A93B74E82E4209'  # Vladimir 'phcoder' Serbinenko <phcoder@gmail.com>
+              'BE5C23209ACDDACEB20DB0A28C8189F1988C2166'  # Daniel Kiper <dkiper@net-space.pl>
+              '95D2E9AB8740D8046387FD151A09227B1F435A33') # Paul Hardy <unifoundry@unifoundry.com>
+
+source=("git+https://git.savannah.gnu.org/git/grub.git#tag=grub-${_pkgver}?signed"
+        'git+https://git.savannah.gnu.org/git/gnulib.git'
+        "https://ftp.gnu.org/gnu/unifont/unifont-${_unifont_ver}/unifont-${_unifont_ver}.bdf.gz"{,.sig}
+        '0001-00_header-add-GRUB_COLOR_-variables.patch'
+        '0002-10_linux-detect-archlinux-initramfs.patch'
+        '0003-support-dropins-for-default-configuration.patch'
+        'grub.default'
+        'sbat.csv')
+
+sha256sums=('304d5c0d506d3aaab496bdcbfc325b89fc83348aeb9e69d7b6a928f4051bedb2'
+            'SKIP'
+            '8ea5b5a14d71e3353d1fea373f5d88d198ad1e285cedd8294655926ee11fd91d'
+            'SKIP'
+            '5dee6628c48eef79812bb9e86ee772068d85e7fcebbd2b2b8d1e19d24eda9dab'
+            '8488aec30a93e8fe66c23ef8c23aefda39c38389530e9e73ba3fbcc8315d244d'
+            'b5d9fcd62ffb3c3950fdeb7089ec2dc2294ac52e9861980ad90a437dedbd3d47'
+            '1a8dd1d80d0eb8db0db56719694e2e6eee96d42b3e2ccbe618320d7c12ccd65c'
+            'a89ff0e8d5f0c202d61ddb3d21341ac0017ec7fb5b3f7c433d9f815bf5952952')
 
 _backports=(
 )
@@ -118,240 +76,244 @@
 )
 
 _configure_options=(
-  PACKAGE_VERSION="${epoch}:${pkgver}-${pkgrel}"
-  FREETYPE="pkg-config freetype2"
-  BUILD_FREETYPE="pkg-config freetype2"
-  --enable-nls
-  --enable-device-mapper
-  --enable-cache-stats
-  --enable-grub-mkfont
-  --enable-grub-mount
-  --prefix="/usr"
-  --bindir="/usr/bin"
-  --sbindir="/usr/bin"
-  --mandir="/usr/share/man"
-  --infodir="/usr/share/info"
-  --datarootdir="/usr/share"
-  --sysconfdir="/etc"
-  --program-prefix=""
-  --with-bootdir="/boot"
-  --with-grubdir="grub"
-  --disable-silent-rules
-  --disable-werror
+	PACKAGE_VERSION="${epoch}:${pkgver}-${pkgrel}"
+	FREETYPE="pkg-config freetype2"
+	BUILD_FREETYPE="pkg-config freetype2"
+	--enable-nls
+	--enable-device-mapper
+	--enable-cache-stats
+	--enable-grub-mkfont
+	--enable-grub-mount
+	--prefix="/usr"
+	--bindir="/usr/bin"
+	--sbindir="/usr/bin"
+	--mandir="/usr/share/man"
+	--infodir="/usr/share/info"
+	--datarootdir="/usr/share"
+	--sysconfdir="/etc"
+	--program-prefix=""
+	--with-bootdir="/boot"
+	--with-grubdir="grub"
+	--disable-silent-rules
+	--disable-werror
 )
 
 prepare() {
-  cd "${srcdir}/grub/"
-
-  echo "Apply backports..."
-  local _c
-  for _c in "${_backports[@]}"; do
-    git log --oneline -1 "${_c}"
-    git cherry-pick -n "${_c}"
-  done
-
-  echo "Apply reverts..."
-  local _c
-  for _c in "${_reverts[@]}"; do
-    git log --oneline -1 "${_c}"
-    git revert -n "${_c}"
-  done
-
-  echo "Patch to enable GRUB_COLOR_* variables in grub-mkconfig..."
-  patch -Np1 -i "${srcdir}/0001-00_header-add-GRUB_COLOR_-variables.patch"
-
-  echo "Patch to detect of Arch Linux initramfs images by grub-mkconfig..."
-  patch -Np1 -i "${srcdir}/0002-10_linux-detect-archlinux-initramfs.patch"
-
-  echo "Patch to support dropins for default configuration..."
-  patch -Np1 -i "${srcdir}/0003-support-dropins-for-default-configuration.patch"
-
-  echo "Fix DejaVuSans.ttf location so that grub-mkfont can create *.pf2 files for starfield theme..."
-  sed 's|/usr/share/fonts/dejavu|/usr/share/fonts/dejavu /usr/share/fonts/TTF|g' -i "configure.ac"
-
-  echo "Fix mkinitcpio 'rw' FS#36275..."
-  sed 's| ro | rw |g' -i "util/grub.d/10_linux.in"
-
-  echo "Fix OS naming FS#33393..."
-  sed 's|GNU/Linux|Linux|' -i "util/grub.d/10_linux.in"
-
-  echo "Pull in latest language files..."
-  ./linguas.sh
-
-  echo "Avoid problem with unifont during compile of grub..."
-  gzip -cd "${srcdir}/unifont-${_unifont_ver}.bdf.gz" > "unifont.bdf"
-
-  echo "Run bootstrap..."
-  ./bootstrap \
-    --gnulib-srcdir="${srcdir}/gnulib/" \
-    --no-git
-
-  echo "Make translations reproducible..."
-  sed -i '1i /^PO-Revision-Date:/ d' po/*.sed
+	cd "${srcdir}/grub/"
+
+	echo "Apply backports..."
+	local _c
+	for _c in "${_backports[@]}"; do
+		git log --oneline -1 "${_c}"
+		git cherry-pick -n "${_c}"
+	done
+
+	echo "Apply reverts..."
+	local _c
+	for _c in "${_reverts[@]}"; do
+		git log --oneline -1 "${_c}"
+		git revert -n "${_c}"
+	done
+
+	echo "Patch to enable GRUB_COLOR_* variables in grub-mkconfig..."
+	patch -Np1 -i "${srcdir}/0001-00_header-add-GRUB_COLOR_-variables.patch"
+
+	echo "Patch to detect of Arch Linux initramfs images by grub-mkconfig..."
+	patch -Np1 -i "${srcdir}/0002-10_linux-detect-archlinux-initramfs.patch"
+
+	echo "Patch to support dropins for default configuration..."
+	patch -Np1 -i "${srcdir}/0003-support-dropins-for-default-configuration.patch"
+
+	echo "Fix DejaVuSans.ttf location so that grub-mkfont can create *.pf2 files for starfield theme..."
+	sed 's|/usr/share/fonts/dejavu|/usr/share/fonts/dejavu /usr/share/fonts/TTF|g' -i "configure.ac"
+
+	echo "Fix mkinitcpio 'rw' FS#36275..."
+	sed 's| ro | rw |g' -i "util/grub.d/10_linux.in"
+
+	echo "Fix OS naming FS#33393..."
+	sed 's|GNU/Linux|Linux|' -i "util/grub.d/10_linux.in"
+
+	echo "Pull in latest language files..."
+	./linguas.sh
+
+	echo "Avoid problem with unifont during compile of grub..."
+	gzip -cd "${srcdir}/unifont-${_unifont_ver}.bdf.gz" > "unifont.bdf"
+
+	echo "Run bootstrap..."
+	./bootstrap \
+		--gnulib-srcdir="${srcdir}/gnulib/" \
+		--no-git
+
+	echo "Make translations reproducible..."
+	sed -i '1i /^PO-Revision-Date:/ d' po/*.sed
 }
 
 _build_grub-common_and_bios() {
-  echo "Set ARCH dependent variables for bios build..."
-  if [[ "${CARCH}" == 'x86_64' ]]; then
-    _EFIEMU="--enable-efiemu"
-  else
-    _EFIEMU="--disable-efiemu"
-  fi
-
-  echo "Copy the source for building the bios part..."
-  cp -r "${srcdir}/grub/" "${srcdir}/grub-bios/"
-  cd "${srcdir}/grub-bios/"
-
-  echo "Unset all compiler FLAGS for bios build..."
-  unset CFLAGS
-  unset CPPFLAGS
-  unset CXXFLAGS
-  unset LDFLAGS
-  unset MAKEFLAGS
-
-  echo "Run ./configure for bios build..."
-  ./configure \
-    --with-platform="pc" \
-    --target="i386" \
-    "${_EFIEMU}" \
-    --enable-boot-time \
-    "${_configure_options[@]}"
-
-  if [ ! -z "${SOURCE_DATE_EPOCH}" ]; then
-    echo "Make info pages reproducible..."
-    touch -d "@${SOURCE_DATE_EPOCH}" $(find -name '*.texi')
-  fi
-
-  echo "Run make for bios build..."
-  make
+	echo "Set ARCH dependent variables for bios build..."
+	if [[ "${CARCH}" == 'x86_64' ]]; then
+		_EFIEMU="--enable-efiemu"
+	else
+		_EFIEMU="--disable-efiemu"
+	fi
+
+	echo "Copy the source for building the bios part..."
+	cp -r "${srcdir}/grub/" "${srcdir}/grub-bios/"
+	cd "${srcdir}/grub-bios/"
+
+	echo "Unset all compiler FLAGS for bios build..."
+	unset CFLAGS
+	unset CPPFLAGS
+	unset CXXFLAGS
+	unset LDFLAGS
+	unset MAKEFLAGS
+
+	echo "Run ./configure for bios build..."
+	./configure \
+		--with-platform="pc" \
+		--target="i386" \
+		"${_EFIEMU}" \
+		--enable-boot-time \
+		"${_configure_options[@]}"
+
+	if [ ! -z "${SOURCE_DATE_EPOCH}" ]; then
+		echo "Make info pages reproducible..."
+		touch -d "@${SOURCE_DATE_EPOCH}" $(find -name '*.texi')
+	fi
+
+	echo "Run make for bios build..."
+	make
 }
 
 _build_grub-efi() {
-  echo "Copy the source for building the ${_EFI_ARCH} efi part..."
-  cp -r "${srcdir}/grub/" "${srcdir}/grub-efi-${_EFI_ARCH}/"
-  cd "${srcdir}/grub-efi-${_EFI_ARCH}/"
-
-  echo "Unset all compiler FLAGS for ${_EFI_ARCH} efi build..."
-  unset CFLAGS
-  unset CPPFLAGS
-  unset CXXFLAGS
-  unset LDFLAGS
-  unset MAKEFLAGS
-
-  echo "Run ./configure for ${_EFI_ARCH} efi build..."
-  ./configure \
-    --with-platform="efi" \
-    --target="${_EFI_ARCH}" \
-    --disable-efiemu \
-    --enable-boot-time \
-    "${_configure_options[@]}"
-
-  echo "Run make for ${_EFI_ARCH} efi build..."
-  make
+	echo "Copy the source for building the ${_EFI_ARCH} efi part..."
+	cp -r "${srcdir}/grub/" "${srcdir}/grub-efi-${_EFI_ARCH}/"
+	cd "${srcdir}/grub-efi-${_EFI_ARCH}/"
+
+	echo "Unset all compiler FLAGS for ${_EFI_ARCH} efi build..."
+	unset CFLAGS
+	unset CPPFLAGS
+	unset CXXFLAGS
+	unset LDFLAGS
+	unset MAKEFLAGS
+
+	echo "Run ./configure for ${_EFI_ARCH} efi build..."
+	./configure \
+		--with-platform="efi" \
+		--target="${_EFI_ARCH}" \
+		--disable-efiemu \
+		--enable-boot-time \
+		"${_configure_options[@]}"
+
+	echo "Run make for ${_EFI_ARCH} efi build..."
+	make
 }
 
 _build_grub-emu() {
-  echo "Copy the source for building the emu part..."
-  cp -r "${srcdir}/grub/" "${srcdir}/grub-emu/"
-  cd "${srcdir}/grub-emu/"
-
-  echo "Unset all compiler FLAGS for emu build..."
-  unset CFLAGS
-  unset CPPFLAGS
-  unset CXXFLAGS
-  unset LDFLAGS
-  unset MAKEFLAGS
-
-  echo "Run ./configure for emu build..."
-  ./configure \
-    --with-platform="emu" \
-    --target="${_EMU_ARCH}" \
-    --enable-grub-emu-usb=no \
-    --enable-grub-emu-sdl=no \
-    --disable-grub-emu-pci \
-    "${_configure_options[@]}"
-
-  echo "Run make for emu build..."
-  make
+	echo "Copy the source for building the emu part..."
+	cp -r "${srcdir}/grub/" "${srcdir}/grub-emu/"
+	cd "${srcdir}/grub-emu/"
+
+	echo "Unset all compiler FLAGS for emu build..."
+	unset CFLAGS
+	unset CPPFLAGS
+	unset CXXFLAGS
+	unset LDFLAGS
+	unset MAKEFLAGS
+
+	echo "Run ./configure for emu build..."
+	./configure \
+		--with-platform="emu" \
+		--target="${_EMU_ARCH}" \
+		--enable-grub-emu-usb=no \
+		--enable-grub-emu-sdl=no \
+		--disable-grub-emu-pci \
+		"${_configure_options[@]}"
+
+	echo "Run make for emu build..."
+	make
 }
 
 build() {
-  cd "${srcdir}/grub/"
-
-  echo "Build grub bios stuff..."
-  _build_grub-common_and_bios
-
-  echo "Build grub ${_EFI_ARCH} efi stuff..."
-  _build_grub-efi
-
-  if [[ "${CARCH}" == "x86_64" ]] && [[ "${_IA32_EFI_IN_ARCH_X64}" == "1" ]]; then
-    echo "Build grub i386 efi stuff..."
-    _EFI_ARCH="i386" _build_grub-efi
-  fi
-
-  if [[ "${_GRUB_EMU_BUILD}" == "1" ]]; then
-    echo "Build grub emu stuff..."
-    _build_grub-emu
-  fi
+	cd "${srcdir}/grub/"
+
+	echo "Build grub bios stuff..."
+	_build_grub-common_and_bios
+
+	echo "Build grub ${_EFI_ARCH} efi stuff..."
+	_build_grub-efi
+
+	if [[ "${CARCH}" == "x86_64" ]] && [[ "${_IA32_EFI_IN_ARCH_X64}" == "1" ]]; then
+		echo "Build grub i386 efi stuff..."
+		_EFI_ARCH="i386" _build_grub-efi
+	fi
+
+	if [[ "${_GRUB_EMU_BUILD}" == "1" ]]; then
+		echo "Build grub emu stuff..."
+		_build_grub-emu
+	fi
 }
 
 _package_grub-common_and_bios() {
-  cd "${srcdir}/grub-bios/"
-
-  echo "Run make install for bios build..."
-  make DESTDIR="${pkgdir}/" bashcompletiondir="/usr/share/bash-completion/completions" install
-
-  echo "Remove gdb debugging related files for bios build..."
-  rm -f "${pkgdir}/usr/lib/grub/i386-pc"/*.module || true
-  rm -f "${pkgdir}/usr/lib/grub/i386-pc"/*.image || true
-  rm -f "${pkgdir}/usr/lib/grub/i386-pc"/{kernel.exec,gdb_grub,gmodule.pl} || true
-
-  echo "Install /etc/default/grub (used by grub-mkconfig)..."
-  install -D -m0644 "${srcdir}/grub.default" "${pkgdir}/etc/default/grub"
+	cd "${srcdir}/grub-bios/"
+
+	echo "Run make install for bios build..."
+	make DESTDIR="${pkgdir}/" bashcompletiondir="/usr/share/bash-completion/completions" install
+
+	echo "Remove gdb debugging related files for bios build..."
+	rm -f "${pkgdir}/usr/lib/grub/i386-pc"/*.module || true
+	rm -f "${pkgdir}/usr/lib/grub/i386-pc"/*.image || true
+	rm -f "${pkgdir}/usr/lib/grub/i386-pc"/{kernel.exec,gdb_grub,gmodule.pl} || true
+
+	echo "Install /etc/default/grub (used by grub-mkconfig)..."
+	install -D -m0644 "${srcdir}/grub.default" "${pkgdir}/etc/default/grub"
 }
 
 _package_grub-efi() {
-  cd "${srcdir}/grub-efi-${_EFI_ARCH}/"
-
-  echo "Run make install for ${_EFI_ARCH} efi build..."
-  make DESTDIR="${pkgdir}/" bashcompletiondir="/usr/share/bash-completion/completions" install
-
-  echo "Remove gdb debugging related files for ${_EFI_ARCH} efi build..."
-  rm -f "${pkgdir}/usr/lib/grub/${_EFI_ARCH}-efi"/*.module || true
-  rm -f "${pkgdir}/usr/lib/grub/${_EFI_ARCH}-efi"/*.image || true
-  rm -f "${pkgdir}/usr/lib/grub/${_EFI_ARCH}-efi"/{kernel.exec,gdb_grub,gmodule.pl} || true
-
-  sed -e "s/%PKGVER%/${epoch}:${pkgver}-${pkgrel}/" < "${srcdir}/sbat.csv" > "${pkgdir}/usr/share/grub/sbat.csv"
+	cd "${srcdir}/grub-efi-${_EFI_ARCH}/"
+
+	echo "Run make install for ${_EFI_ARCH} efi build..."
+	make DESTDIR="${pkgdir}/" bashcompletiondir="/usr/share/bash-completion/completions" install
+
+	echo "Remove gdb debugging related files for ${_EFI_ARCH} efi build..."
+	rm -f "${pkgdir}/usr/lib/grub/${_EFI_ARCH}-efi"/*.module || true
+	rm -f "${pkgdir}/usr/lib/grub/${_EFI_ARCH}-efi"/*.image || true
+	rm -f "${pkgdir}/usr/lib/grub/${_EFI_ARCH}-efi"/{kernel.exec,gdb_grub,gmodule.pl} || true
+
+	sed -e "s/%PKGVER%/${epoch}:${pkgver}-${pkgrel}/" < "${srcdir}/sbat.csv" > "${pkgdir}/usr/share/grub/sbat.csv"
 }
 
 _package_grub-emu() {
-  cd "${srcdir}/grub-emu/"
-
-  echo "Run make install for emu build..."
-  make DESTDIR="${pkgdir}/" bashcompletiondir="/usr/share/bash-completion/completions" install
-
-  echo "Remove gdb debugging related files for emu build..."
-  rm -f "${pkgdir}/usr/lib/grub/${_EMU_ARCH}-emu"/*.module || true
-  rm -f "${pkgdir}/usr/lib/grub/${_EMU_ARCH}-emu"/*.image || true
-  rm -f "${pkgdir}/usr/lib/grub/${_EMU_ARCH}-emu"/{kernel.exec,gdb_grub,gmodule.pl} || true
+	cd "${srcdir}/grub-emu/"
+
+	echo "Run make install for emu build..."
+	make DESTDIR="${pkgdir}/" bashcompletiondir="/usr/share/bash-completion/completions" install
+
+	echo "Remove gdb debugging related files for emu build..."
+	rm -f "${pkgdir}/usr/lib/grub/${_EMU_ARCH}-emu"/*.module || true
+	rm -f "${pkgdir}/usr/lib/grub/${_EMU_ARCH}-emu"/*.image || true
+	rm -f "${pkgdir}/usr/lib/grub/${_EMU_ARCH}-emu"/{kernel.exec,gdb_grub,gmodule.pl} || true
 }
 
 package() {
-  cd "${srcdir}/grub/"
-
-  echo "Package grub ${_EFI_ARCH} efi stuff..."
-  _package_grub-efi
-
-  if [[ "${CARCH}" == "x86_64" ]] && [[ "${_IA32_EFI_IN_ARCH_X64}" == "1" ]]; then
-    echo "Package grub i386 efi stuff..."
-    _EFI_ARCH="i386" _package_grub-efi
-  fi
-
-  if [[ "${_GRUB_EMU_BUILD}" == "1" ]]; then
-    echo "Package grub emu stuff..."
-    _package_grub-emu
-  fi
-
-  echo "Package grub bios stuff..."
-  _package_grub-common_and_bios
-}
+	cd "${srcdir}/grub/"
+
+	echo "Package grub ${_EFI_ARCH} efi stuff..."
+	_package_grub-efi
+
+	if [[ "${CARCH}" == "x86_64" ]] && [[ "${_IA32_EFI_IN_ARCH_X64}" == "1" ]]; then
+		echo "Package grub i386 efi stuff..."
+		_EFI_ARCH="i386" _package_grub-efi
+	fi
+
+	if [[ "${_GRUB_EMU_BUILD}" == "1" ]]; then
+		echo "Package grub emu stuff..."
+		_package_grub-emu
+	fi
+
+	echo "Package grub bios stuff..."
+	_package_grub-common_and_bios
+
+	install -m0755 /dev/stdin "${pkgdir}"/usr/bin/update-grub <<END
+grub-mkconfig -o /boot/grub/grub.cfg
+END
+}
