--- Arch PKGBUILD
+++ Artix PKGBUILD
@@ -5,95 +5,94 @@
 pkgdesc="C language family frontend for LLVM (32-bit)"
 arch=('x86_64')
 url="https://clang.llvm.org/"
-license=('Apache-2.0 WITH LLVM-exception')
+license=('custom:Apache 2.0 with LLVM Exception')
 depends=('lib32-llvm-libs' 'gcc-multilib')
 makedepends=('lib32-llvm' 'cmake' 'ninja' 'python')
 _source_base=https://github.com/llvm/llvm-project/releases/download/llvmorg-$pkgver
 source=($_source_base/clang-$pkgver.src.tar.xz{,.sig}
-        $_source_base/llvm-$pkgver.src.tar.xz{,.sig}
-        $_source_base/cmake-$pkgver.src.tar.xz{,.sig}
-        $_source_base/third-party-$pkgver.src.tar.xz{,.sig}
-        enable-fstack-protector-strong-by-default.patch)
+	$_source_base/llvm-$pkgver.src.tar.xz{,.sig}
+	$_source_base/cmake-$pkgver.src.tar.xz{,.sig}
+	$_source_base/third-party-$pkgver.src.tar.xz{,.sig}
+	enable-fstack-protector-strong-by-default.patch)
 sha256sums=('5724fe0a13087d5579104cedd2f8b3bc10a212fb79a0fcdac98f4880e19f4519'
-            'SKIP'
-            'f68cf90f369bc7d0158ba70d860b0cb34dbc163d6ff0ebc6cfa5e515b9b2e28d'
-            'SKIP'
-            '59badef592dd34893cd319d42b323aaa990b452d05c7180ff20f23ab1b41e837'
-            'SKIP'
-            'b76b810f3d3dc5d08e83c4236cb6e395aa9bd5e3ea861e8c319b216d093db074'
-            'SKIP'
-            'ef319e65f927718e1d3b1a23c480d686b1d292e2a0bf27229540964f9734117a')
+	'SKIP'
+	'f68cf90f369bc7d0158ba70d860b0cb34dbc163d6ff0ebc6cfa5e515b9b2e28d'
+	'SKIP'
+	'59badef592dd34893cd319d42b323aaa990b452d05c7180ff20f23ab1b41e837'
+	'SKIP'
+	'b76b810f3d3dc5d08e83c4236cb6e395aa9bd5e3ea861e8c319b216d093db074'
+	'SKIP'
+	'ef319e65f927718e1d3b1a23c480d686b1d292e2a0bf27229540964f9734117a')
 validpgpkeys=('474E22316ABF4785A88C6E8EA2C794A986419D8A') # Tom Stellard <tstellar@redhat.com>
 
 _get_distribution_components() {
-  local target
-  ninja -t targets | grep -Po 'install-\K.*(?=-stripped:)' | while read -r target; do
-    case $target in
-      clang-libraries|distribution)
-        continue
-        ;;
-      clang-tidy-headers)
-        continue
-        ;;
-      clang|clangd|clang-*)
-        ;;
-      clang*|findAllSymbols|scan-build-py)
-        continue
-        ;;
-    esac
-    echo $target
-  done
+	local target
+	ninja -t targets | grep -Po 'install-\K.*(?=-stripped:)' | while read -r target; do
+		case $target in
+		clang-libraries | distribution)
+			continue
+			;;
+		clang-tidy-headers)
+			continue
+			;;
+		clang | clangd | clang-*) ;;
+		clang* | findAllSymbols | scan-build-py)
+			continue
+			;;
+		esac
+		echo $target
+	done
 }
 
 prepare() {
-  rename -v -- "-$pkgver.src" '' {cmake,third-party}-$pkgver.src
-  cd clang-$pkgver.src
-  mkdir build
-  patch -Np2 -i ../enable-fstack-protector-strong-by-default.patch
+	rename -v -- "-$pkgver.src" '' {cmake,third-party}-$pkgver.src
+	cd clang-$pkgver.src
+	mkdir build
+	patch -Np2 -i ../enable-fstack-protector-strong-by-default.patch
 }
 
 build() {
-  cd "$srcdir/clang-$pkgver.src/build"
+	cd "$srcdir/clang-$pkgver.src/build"
 
-  export PKG_CONFIG_PATH="/usr/lib32/pkgconfig"
+	export PKG_CONFIG_PATH="/usr/lib32/pkgconfig"
 
-  local cmake_args=(
-    -G Ninja
-    -DCMAKE_BUILD_TYPE=Release
-    -DCMAKE_INSTALL_PREFIX=/usr
-    -DCMAKE_SKIP_RPATH=ON
-    -DCLANG_DEFAULT_PIE_ON_LINUX=ON
-    -DCLANG_LINK_CLANG_DYLIB=ON
-    -DCMAKE_CXX_FLAGS:STRING=-m32
-    -DCMAKE_C_FLAGS:STRING=-m32
-    -DENABLE_LINKER_BUILD_ID=ON
-    -DLLVM_BUILD_DOCS=OFF
-    -DLLVM_BUILD_TESTS=OFF
-    -DLLVM_CONFIG="/usr/bin/llvm-config32"
-    -DLLVM_ENABLE_RTTI=ON
-    -DLLVM_ENABLE_SPHINX=OFF
-    -DLLVM_EXTERNAL_LIT=/usr/bin/lit
-    -DLLVM_INCLUDE_DOCS=OFF
-    -DLLVM_LIBDIR_SUFFIX=32
-    -DLLVM_LINK_LLVM_DYLIB=ON
-    -DLLVM_MAIN_SRC_DIR="$srcdir/llvm-$pkgver.src"
-  )
+	local cmake_args=(
+		-G Ninja
+		-DCMAKE_BUILD_TYPE=Release
+		-DCMAKE_INSTALL_PREFIX=/usr
+		-DCMAKE_SKIP_RPATH=ON
+		-DCLANG_DEFAULT_PIE_ON_LINUX=ON
+		-DCLANG_LINK_CLANG_DYLIB=ON
+		-DCMAKE_CXX_FLAGS:STRING=-m32
+		-DCMAKE_C_FLAGS:STRING=-m32
+		-DENABLE_LINKER_BUILD_ID=ON
+		-DLLVM_BUILD_DOCS=OFF
+		-DLLVM_BUILD_TESTS=OFF
+		-DLLVM_CONFIG="/usr/bin/llvm-config32"
+		-DLLVM_ENABLE_RTTI=ON
+		-DLLVM_ENABLE_SPHINX=OFF
+		-DLLVM_EXTERNAL_LIT=/usr/bin/lit
+		-DLLVM_INCLUDE_DOCS=OFF
+		-DLLVM_LIBDIR_SUFFIX=32
+		-DLLVM_LINK_LLVM_DYLIB=ON
+		-DLLVM_MAIN_SRC_DIR="$srcdir/llvm-$pkgver.src"
+	)
 
-  cmake .. "${cmake_args[@]}"
-  local distribution_components=$(_get_distribution_components | paste -sd\;)
-  test -n "$distribution_components"
-  cmake_args+=(-DLLVM_DISTRIBUTION_COMPONENTS="$distribution_components")
+	cmake .. "${cmake_args[@]}"
+	local distribution_components=$(_get_distribution_components | paste -sd\;)
+	test -n "$distribution_components"
+	cmake_args+=(-DLLVM_DISTRIBUTION_COMPONENTS="$distribution_components")
 
-  cmake .. "${cmake_args[@]}"
-  ninja
+	cmake .. "${cmake_args[@]}"
+	ninja
 }
 
 package() {
-  cd clang-$pkgver.src/build
+	cd clang-$pkgver.src/build
 
-  DESTDIR="$pkgdir" ninja install-distribution
-  rm -rf "$pkgdir"/usr/{bin,include,lib,libexec,share}
+	DESTDIR="$pkgdir" ninja install-distribution
+	rm -rf "$pkgdir"/usr/{bin,include,lib,libexec,share}
 
-  install -Dm644 ../LICENSE.TXT "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
+	install -Dm644 ../LICENSE.TXT "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
 }
 
